{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","console","log","monsters","map","card_component_Card","key","Search","placeholder","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeSearchHandler","event","setState","searchText","target","value","state","_this2","fetch","then","response","json","users","user","catch","err","_this3","filteredMonster","filter","toLowerCase","includes","search_component_Search","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,eAAO,SAAAC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAI,UACJC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BAELR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,UCNXC,SAAW,SAAAZ,GAEtB,OADAa,QAAQC,IAAId,GAEVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMe,SAASC,IAAI,SAAAR,GAAO,OACzBP,EAAAC,EAAAC,cAACc,EAAD,CAAMT,QAASA,EAASU,IAAKV,EAAQC,UCPhCU,SAAS,SAAAnB,GACpB,OACEC,EAAAC,EAAAC,cAAA,SACEiB,YAAapB,EAAMoB,YACnBC,KAAK,SACLC,SAAUtB,EAAMsB,SAChBlB,UAAU,aCyCDmB,cA3Cb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KAoBR+B,sBAAwB,SAAAC,GACtBR,EAAKS,SAAS,CAAEC,WAAYF,EAAMG,OAAOC,SApBzCZ,EAAKa,MAAQ,CACXtB,SAAU,GACVmB,WAAY,IAJGV,mFAQC,IAAAc,EAAAX,KAClBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAM5B,EAAW4B,EAAM3B,IAAI,SAAA4B,GACzB,MAAO,CAAElC,KAAMkC,EAAKlC,KAAMD,GAAImC,EAAKnC,GAAIE,MAAOiC,EAAKjC,SAGrD2B,EAAKL,SAAS,CAAElB,eAEjB8B,MAAM,SAAAC,GAAG,OAAIjC,QAAQC,IAAIgC,sCAOrB,IAAAC,EAAApB,KACDqB,EAAkBrB,KAAKU,MAAMtB,SAASkC,OAAO,SAAAzC,GAAO,OACxDA,EAAQE,KAAKwC,cAAcC,SAASJ,EAAKV,MAAMH,WAAWgB,iBAG5D,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACiD,EAAD,CACEhC,YAAY,iBACZE,SAAUK,KAAKI,wBAEjB9B,EAAAC,EAAAC,cAACkD,EAAD,CAAUtC,SAAUiC,YAtCVM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.74524c1c.chunk.js","sourcesContent":["import React from 'react';\nimport './card-style.css';\n\nexport const Card = props => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Card } from '../card/card-component';\nimport './card-list.styles.css';\n\nexport const CardList = props => {\n  console.log(props);\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './search.styles.css';\n\nexport const Search = props => {\n  return (\n    <input\n      placeholder={props.placeholder}\n      type=\"search\"\n      onChange={props.onChange}\n      className=\"search\"\n    />\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { Search } from './components/search/search.component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchText: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => {\n        const monsters = users.map(user => {\n          return { name: user.name, id: user.id, email: user.email };\n        });\n\n        this.setState({ monsters });\n      })\n      .catch(err => console.log(err));\n  }\n\n  onChangeSearchHandler = event => {\n    this.setState({ searchText: event.target.value });\n  };\n\n  render() {\n    const filteredMonster = this.state.monsters.filter(monster =>\n      monster.name.toLowerCase().includes(this.state.searchText.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholder=\"Search Monster\"\n          onChange={this.onChangeSearchHandler}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}